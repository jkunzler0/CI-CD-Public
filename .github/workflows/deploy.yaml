name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      commit_sha:
        description: >
          Commit SHA to deploy.
          "HEAD" can be used to deploy the latest commit.
        required: true
        default: HEAD
      deploy_env:
        description: Environment to deploy to.
        type: choice
        required: true
        default: Staging
        options:
          - Staging
          - Production
      release_types:
        description: >
          Release types to deploy.
          Applies only if the deploy environment is "Production".
        type: choice
        required: true
        default: Both
        options:
          - Infrastructure
          - CLI
          - Both
      tag-increment-type:
        description: >
          Increment type for the new tag.
          Applies to all selected release types.
          Applies only if the deploy environment is "Production".
        type: choice
        required: true
        default: Patch
        options:
          - Major
          - Minor
          - Patch

env:
  PYTHON_VERSION: "3.11.4"
  AWS_REGION : us-east-1

# Only allow a single deployment to run at a time.
concurrency: deploy

permissions:
  id-token: write   # Required for requesting the JWT
  contents: read   # Required for ...
  # contents: write   # Required for ...

jobs:
  Evaluate_Inputs:
    runs-on: ubuntu-latest
    outputs:
      # commit_sha: Commit SHA to deploy.
      commit_sha: ${{ steps.set_commit_sha.outputs.commit_sha }}
      # deploy_env: Environment to deploy to. (staging or prod)
      deploy_env: ${{ steps.get_inputs.outputs.deploy_env }}
      # tag_increment_type: Increment type for the potential new tags.
      # (Major, Minor, or Patch)
      tag_increment_type: ${{ steps.get_inputs.outputs.tag_increment_type }}
      # infra_flag: True if the infrastructure should be deployed, false
      # otherwise.
      infra_flag: ${{ steps.set_infra_and_cli_flags.outputs.infra_flag }}
      # cli_flag: True if the CLI should be published to PyPI, false otherwise.
      cli_flag: ${{ steps.set_infra_and_cli_flags.outputs.cli_flag }}
    steps:
      - name: Get Inputs and Set Defaults
        id: get_inputs
        run: |
          # NOTE: This step is required as the default value for an input
          # is empty if the workflow is not triggered by a workflow_dispatch
          # event (manual run).

          input_commit_sha=${{ github.event.inputs.commit_sha }}
          commit_sha=${input_commit_sha:-"HEAD"}
          echo "commit_sha=$commit_sha" >> "$GITHUB_OUTPUT"

          input_deploy_env=${{ github.event.inputs.deploy_env }}
          deploy_env=${input_deploy_env:-"Staging"}
          echo "deploy_env=$deploy_env" >> "$GITHUB_OUTPUT"

          input_release_types=${{ github.event.inputs.release_types }}
          release_types=${input_release_types:-"Both"}
          echo "release_types=$release_types" >> "$GITHUB_OUTPUT"

          input_tag_increment_type=${{ github.event.inputs.tag-increment-type }}
          tag_increment_type=${input_tag_increment_type:-"Patch"}
          echo "tag_increment_type=$tag_increment_type" >> "$GITHUB_OUTPUT"

      - name: Set Commit SHA
        id: set_commit_sha
        run: |
          commit_sha=${{ steps.get_inputs.outputs.commit_sha }}
          if [[ "$commit_sha" == "HEAD" ]]; then
            echo "commit_sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "commit_sha=$commit_sha" >> "$GITHUB_OUTPUT"
          fi

      - name: Set Infra and CLI Flags
        id: set_infra_and_cli_flags
        run: |
          release_types=${{ steps.get_inputs.outputs.release_types }}
          if [[ "$release_types" == "Infrastructure" ]]; then
            infra_flag=true
            cli_flag=false
          elif [[ "$release_types" == "CLI" ]]; then
            infra_flag=false
            cli_flag=true
          else
            infra_flag=true
            cli_flag=true
          fi
          deploy_env=${{ steps.get_inputs.outputs.deploy_env }}
          if [[ "$deploy_env" == "Staging" ]]; then
            infra_flag=true
            cli_flag=false
          fi
          echo "infra_flag=$infra_flag" >> "$GITHUB_OUTPUT"
          echo "cli_flag=$cli_flag" >> "$GITHUB_OUTPUT"
      
      - name: Verify Permission to Deploy to Production
        if: ${{ steps.get_inputs.outputs.deploy_env == 'Production' }}
        run: |
          if [[ "${{ github.repository_owner }}" != "${{ github.actor }}" ]]; then
            echo "The actor (who triggered the workflow) is not the repository owner. Blocking deployment to Production."
            exit 1
          fi
      
      - name: Print Outputs
        run: |
          echo "infra_flag=${{ steps.set_infra_and_cli_flags.outputs.infra_flag }}"
          echo "cli_flag=${{ steps.set_infra_and_cli_flags.outputs.cli_flag }}"
          echo "commit_sha=${{ steps.set_commit_sha.outputs.commit_sha }}"
          echo "deploy_env=${{ steps.get_inputs.outputs.deploy_env }}"
          echo "tag_increment_type=${{ steps.get_inputs.outputs.tag_increment_type }}"

  Update_Production_Tags:
    runs-on: ubuntu-latest
    needs: Evaluate_Inputs
    if: ${{ needs.Evaluate_Inputs.outputs.deploy_env == 'Production' }}
    environment: Production
    outputs:
      new_cli_tag: ${{ steps.calculate_tags.outputs.new_cli_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          # A GitHub PAT with "workflow" scope is required to push tags.
          # token: TODO
          # token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: ${{ needs.Evaluate_Inputs.outputs.commit_sha }}

      - name: Get Tags
        id: get_tags
        run: |
          all_tags=$(git tag -l)
          infra_tags=$(echo "$all_tags" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V)
          cli_tags=$(echo "$all_tags" | grep -E "^cli-v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V)

          latest_infra_tag=$(echo "$infra_tags" | tail -n 1)
          latest_cli_tag=$(echo "$cli_tags" | tail -n 1)

          # For debugging
          echo "infra_tags=$infra_tags"
          echo "latest_infra_tag=$latest_infra_tag"
          echo "cli_tags=$cli_tags"
          echo "latest_cli_tag=$latest_cli_tag"

          # If there are no tags, start at v0.0.0
          # (This will be incremented depending on the tag-increment-type.)
          if [[ -z "$latest_infra_tag" ]]; then
            latest_infra_tag="v0.0.0"
          fi
          if [[ -z "$latest_cli_tag" ]]; then
            latest_cli_tag="cli-v0.0.0"
          fi

          echo "latest_infra_tag=$latest_infra_tag" >> "$GITHUB_OUTPUT"
          echo "latest_cli_tag=$latest_cli_tag" >> "$GITHUB_OUTPUT"
  
      - name: Calculate New Tags
        id: calculate_tags
        run: |
          tag_increment_type="${{ needs.Evaluate_Inputs.outputs.tag_increment_type }}"

          latest_infra_tag="${{ steps.get_tags.outputs.latest_infra_tag }}"
          latest_cli_tag="${{ steps.get_tags.outputs.latest_cli_tag }}"

          # Remove the leading "v" from the infra tag and the leading "cli-v"
          # from the cli tag
          infra_tag=$(echo "$latest_infra_tag" | sed 's/^v//')
          cli_tag=$(echo "$latest_cli_tag" | sed 's/^cli-v//')

          # Increment the tag depending on the tag-increment-type.
          case "$tag_increment_type" in
            Major) infra_tag=$(echo "$infra_tag" | awk -F. '{$1++; print $1".0.0"}') ;;
            Minor) infra_tag=$(echo "$infra_tag" | awk -F. '{$2++; print $1"."$2".0"}') ;;
            Patch) infra_tag=$(echo "$infra_tag" | awk -F. '{$3++; print $1"."$2"."$3}') ;;
          esac
          case "$tag_increment_type" in
            Major) cli_tag=$(echo "$cli_tag" | awk -F. '{$1++; print $1".0.0"}') ;;
            Minor) cli_tag=$(echo "$cli_tag" | awk -F. '{$2++; print $1"."$2".0"}') ;;
            Patch) cli_tag=$(echo "$cli_tag" | awk -F. '{$3++; print $1"."$2"."$3}') ;;
          esac

          new_infra_tag="v$infra_tag"
          new_cli_tag="cli-v$cli_tag"

          echo "new_infra_tag=$new_infra_tag" >> "$GITHUB_OUTPUT"
          echo "new_cli_tag=$new_cli_tag" >> "$GITHUB_OUTPUT"

      - name: Create New Infra Tag
        id: create_infra_tag
        if: ${{ needs.Evaluate_Inputs.outputs.infra_flag == 'true' }}
        run: |
          new_tag="${{ steps.calculate_tags.outputs.new_infra_tag }}"
          git tag "$new_tag" ${{ needs.Evaluate_Inputs.outputs.commit_sha }}
          git push origin "$new_tag"
          echo "new_infra_tag=$new_tag"
      
      - name: Create New CLI Tag
        id: create_cli_tag
        if: ${{ needs.Evaluate_Inputs.outputs.cli_flag == 'true' }}
        run: |
          new_tag="${{ steps.calculate_tags.outputs.new_cli_tag }}"
          git tag "$new_tag" ${{ needs.Evaluate_Inputs.outputs.commit_sha }}
          git push origin "$new_tag"
          echo "new_cli_tag=$new_tag"

  Update_Staging_Tags:
    runs-on: ubuntu-latest
    needs: Evaluate_Inputs
    if: ${{ needs.Evaluate_Inputs.outputs.deploy_env == 'Staging' }}
    environment: Staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          # A GitHub PAT with "workflow" scope is required to push tags.
          # token: TODO
          # token: ${{ secrets.WORKFLOW_TOKEN }}
          ref: ${{ needs.Evaluate_Inputs.outputs.commit_sha }}

      - name: Update Staging Tag
        run: |
          # Check if the local tag 'staging' exists before attempting to delete it.
          if git rev-parse --verify staging >/dev/null 2>&1; then
              git tag -d staging            # Delete the local tag
              git push origin :refs/tags/staging  # Delete the remote tag
          fi
          git tag -f staging ${{ needs.Evaluate_Inputs.outputs.commit_sha }}
          git push origin staging

  Publish_CLI:
    runs-on: ubuntu-latest
    needs: [Evaluate_Inputs, Update_Production_Tags]
    if: ${{ needs.Evaluate_Inputs.outputs.cli_flag == 'true' }}
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Evaluate_Inputs.outputs.commit_sha }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Replace Version
        run: |
          new_cli_flag=${{ needs.Update_Production_Tags.outputs.new_cli_tag }}
          new_version=$(echo "$new_cli_flag" | sed 's/^cli-v//')
          sed -i "s/version = \"[0-9.]*\"/version = \"$new_version\"/" pyproject.toml
          git config --global user.email ${{ github.actor }}@users.noreply.github.com
          git config --global user.name ${{ github.actor }}
          git commit -am "Update CLI PyPI version to $new_version"
          git push origin HEAD:${{ github.ref }}

      - name: Build package
        run: python -m build

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: __token__
          # password: TODO
          password: ${{ secrets.TEST_PYPI_TOKEN }}

  Deploy_Production_Infra:
    needs: Evaluate_Inputs
    runs-on: ubuntu-latest
    if: ${{ needs.Evaluate_Inputs.outputs.deploy_env == 'Production'}}
    environment: Production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Evaluate_Inputs.outputs.commit_sha }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: ${{ vars.AWS_ROLE_ARN }}
      #     aws-region: ${{ env.AWS_REGION }}

      # TEMP
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pulumi Up
        uses: pulumi/actions@v4.4.0
        with:
          # TODO
          # command: up
          command: preview
          # This should be the fully qualified stack name (org/project/stack)
          stack-name: ${{ vars.PULUMI_STACK_NAME }}
          work-dir: ./infrastructure
        env:
            PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  Deploy_Staging_Infra:
    needs: Evaluate_Inputs
    runs-on: ubuntu-latest
    if: ${{ needs.Evaluate_Inputs.outputs.deploy_env == 'Staging'}}
    environment: Staging
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.Evaluate_Inputs.outputs.commit_sha }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v3
      #   with:
      #     role-to-assume: ${{ needs.Evaluate_Inputs.outputs.role_arn }}
      #     aws-region: ${{ env.AWS_REGION }}

      # TEMP
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pulumi Up
        uses: pulumi/actions@v4.4.0
        with:
          # TODO
          # command: up
          command: preview
          # This should be the fully qualified stack name (org/project/stack)
          stack-name: ${{ vars.PULUMI_STACK_NAME }}
          work-dir: ./infrastructure
        env:
            PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
